generator client {
    provider = "prisma-client-js"
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// the user... duh
model User {
    id              String     @id
    lifetimeMinutes Int
    apiKey          String     @unique
    slackUser       SlackUser?

    sessions        Session[]

    logs Log[]

    goals Goal[]

    queue Queue?
    
    // [UserMetaType]
    metadata Json
}

// slack data of the user
model SlackUser {
    slackId   String @id
    user      User   @relation(fields: [userId], references: [id])
    userId    String @unique
    tz_offset Int

    slackToken String? // For future implementation
}

// tracks the user's hour (/hack)
model Session {
    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @id @default(now())

    time    Int
    elapsed Int

    //elapsedSincePause Int - rework this

    completed Boolean
    cancelled Boolean
    paused    Boolean

    /// [SessionMetaType]
    metadata Json

    messageTs String
    controlTs String

    verified Boolean @default(false)

//    silent Boolean @default(false) // This will allow us to log minutes without a session
}

model Log {
    timestamp DateTime @id @default(now())

    type String // "github", "scrapbook", "hackhour", "debug", "internal"

    user User? @relation(fields: [userId], references: [id])
    userId String?

    /// [LogDataType]
    data Json
}

model Queue {
    priority Int // Where -1 is not in queue

    user User @relation(fields: [userId], references: [id])
    userId String @id

    createdAt DateTime @default(now())
}




// Categorizes the user's sessions (group)
model Goal { // Group
  id          String  @id
  user        User    @relation(fields: [userId], references: [id])
  userId      String

  name        String
  description String

  totalMinutes Int
  createdAt   DateTime

  selected    Boolean

  completed   Boolean @default(false)
  metadata    Json?
}

// Ship posts & etc. - anything that counts as a banked hour
//model Bank { 
//  id          String  @id
//  user        User    @relation(fields: [userId], references: [id])
//  userId      String

//  minutes     Int

//  approved    Boolean @default(false)

//  type        String // "ship"/"ysws"/"scrapbook"

//  createdAt   DateTime @default(now())
//  updatedAt   DateTime @updatedAt
//lastBankedAt DateTime

//  sessions    Session[]

//  data    Json
// { "shipLink": "URL", "goalId": "###" }
//}

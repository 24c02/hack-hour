generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// the user... duh
model User {
  id               String  @id
  lifetimeMinutes  Int
  apiKey           String  @unique
  slackUser        SlackUser?
  sessions         Session[]
  goals            Goal[]

  metadata         Json?

  submissions      Bank[]
}

// slack data of the user
model SlackUser {
  slackId          String  @id
  user             User    @relation(fields: [userId], references: [id])
  userId           String  @unique
  tz_offset        Int

  slackToken       String?
}

// tracks the user's hour (/hack)
model Session { // Hack Hour
  user       User  @relation(fields: [userId], references: [id])
  userId     String
  messageTs  String  @id
  controlTs  String  @unique
  createdAt  DateTime @default(now())
  time       Int
  elapsed    Int
  elapsedSincePause Int

  completed  Boolean
  cancelled  Boolean
  paused     Boolean

  Goal       Goal? @relation(fields: [goalId], references: [id])
  goalId     String?

  bank       Bank? @relation(fields: [bankId], references: [id])
  bankId     String?

  metadata   Json?
}

// Categorizes the user's sessions (group)
model Goal { // Group
  id          String  @id
  user        User    @relation(fields: [userId], references: [id])
  userId      String

  name        String
  description String

  totalMinutes Int
  createdAt   DateTime

  selected    Boolean

  completed   Boolean @default(false)
  metadata    Json?

  sessions    Session[]
}

// Ship posts & etc. - anything that counts as a banked hour
model Bank { 
  id          String  @id
  user        User    @relation(fields: [userId], references: [id])
  userId      String

  minutes     Int

  approved    Boolean @default(false)

  type        String // "ship"/"ysws"/"scrapbook"

  createdAt   DateTime @default(now())

  sessions    Session[]

  data    Json
  // { "shipLink": "URL", "goalId": "###" }
}

// flow:
//- user has a hack hour (minute: 1)
//- hack hour finished, go to bank their points in #ship (bot DMs after)
//  - show a list of goals and below that a list of ungoal'd (ungrouped) hack hours
//- we review hours (prioritize banked hours)
//- once a banked hour is approved, remove the ability to change group or remove from bank
//  - AND LOCK THIS IN THE DATABASE (CRITICAL)

//hour.banked?
//user.hours.where(:banked?)
//hour.bank_association_exists?

// questions:
//- how many banked hours in total does a user have?
//  - user.sessions.where(banked: bank, goal: id).sum(:minutes)